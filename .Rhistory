}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
y
## Answer (includig graphics)
X = golub[varid]
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
X
y
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
y
## Answer (includig graphics)
X = golub[varid]
X
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
X_test = X[,test_id]
n = length(Y)
n = length(y)
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
y
## Answer (includig graphics)
X = golub[varid]
X
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(y)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(y)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(y)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id,]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 5  # number of CV folds
R = 45   # number of total repeats
n = length(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id,]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 2  # number of CV folds
R = 45   # number of total repeats
n = length(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id,]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 2  # number of CV folds
R = 45   # number of total repeats
n = length(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id,]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
y = matrix(unlist(sapply(colnames(golub), strsplit, ":")), nrow=2)[1,]
## Answer (includig graphics)
X = golub[varid,]
cvK = 2  # number of CV folds
R = 45   # number of total repeats
n = nrow(X)
cv_acc5_50times = cv_acc5 = c()
for (i in 1:R) {
if (i%%10 == 0) {
# print(i)
}
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id,]
X_train = X[-test_id,]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_acc5_50times <- append(cv_acc5_50times, mean(cv_acc5))
}
var = apply(golub,1,var,na.rm=TRUE)
var = sort(var,decreasing = TRUE)
features = head(var,150)
labs = names(features)
labels = golub[labs,]
labels=t(labels)
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_acc5 = c()
r = 45
X = labels
l = (unlist(lapply(rownames(labels),strsplit,":")))
N = length(l)
y = l[seq(1,N,2)]
n = nrow(X)
for (i in 1:45) {
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc5))
}
boxplot(cv_50acc5_knn, horizontal = T)
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_acc5 = c()
r = 45
X = labels
l = (unlist(lapply(rownames(labels),strsplit,":")))
N = length(l)
y = l[seq(1,N,2)]
n = nrow(X)
for (i in 1:2) {
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc5))
}
table(fit5, y_test)
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_acc5 = c()
r = 45
X = labels
l = (unlist(lapply(rownames(labels),strsplit,":")))
N = length(l)
y = l[seq(1,N,2)]
n = nrow(X)
for (i in 1:1) {
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 7)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc5))
}
table(fit5, y_test)
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_acc5 = c()
r = 45
X = labels
l = (unlist(lapply(rownames(labels),strsplit,":")))
N = length(l)
y = l[seq(1,N,2)]
n = nrow(X)
for (i in 1:1) {
cvSets = cvTools::cvFolds(n, cvK)  # permute all the data, into 5 folds
cv_acc = NA  # initialise results vector
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 10)
cv_acc5[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc5))
}
table(fit5, y_test)
varValue = apply(golub, 1, var, na.rm=TRUE)
cutoffvalue = sort(varValue, decreasing = TRUE)[150]
varid = which(varValue >= cutoffvalue)
varValue[varid] %>% head
VAR = apply(golub,1,var,na.rm=TRUE)
VAR = sort(var,decreasing = TRUE)
FEA = head(var,150)
LAB = names(FEA)
labels = golub[LAB,]
labels=t(labels)
library(GEOquery)  ## go to https://github.com/seandavi/GEOquery for installation details
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery")
install.packages("R.utils")
library(GEOquery)  ## go to https://github.com/seandavi/GEOquery for installation details
library(R.utils)
library(reshape2)
library(ggplot2)
library(limma)
library(dplyr)
library(GEOquery)  ## go to https://github.com/seandavi/GEOquery for installation details
library(R.utils)
library(reshape2)
library(ggplot2)
library(limma)
library(dplyr)
clinical_outcome <-getGEO("GSE120396")
clinical_outcome<- clinical_outcome$GSE120396_series_matrix.txt.gz
print(clinical_outcome$characteristics_ch1.1[1:10])
library(GEOquery)  ## go to https://github.com/seandavi/GEOquery for installation details
library(R.utils)
library(reshape2)
library(ggplot2)
library(limma)
library(dplyr)
clinical_outcome <-getGEO("GSE120396")
clinical_outcome<- clinical_outcome$GSE120396_series_matrix.txt.gz
print(clinical_outcome$characteristics_ch1.1[1:10])
rejection_status  <- clinical_outcome$characteristics_ch1.1
rejection_status <- unlist(lapply( strsplit(as.character(rejection_status), ": " ) , `[[` , 2)  )
table(rejection_status)
# Note: please change this dir to point to the folder where your dataset is
datadir = "GSE120396"
# Read in the files
fileNames <- list.files(datadir)
# Check that we have read in the correct files
print(fileNames[1:5])
for (files in fileNames){
gunzip(file.path(datadir,files))
}
# Read in all 88 files to make a table
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
# Read in all 88 files to make a table
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
# Note: please change this dir to point to the folder where your dataset is
datadir = "GSE120396"
# Read in the files
fileNames <- list.files(datadir)
# Check that we have read in the correct files
print(fileNames[1:5])
for (files in fileNames){
gunzip(file.path(datadir,files))
}
# Read in all 88 files to make a table
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
rownames(gse) = read.delim(file.path(datadir, fileNames[1]), header=TRUE)[,1]
dim(gse)
print(rownames(gse[1:50, ]))
View(gse)
View(gse)
summary(gse[,1])
p <- ggplot(melt(gse), aes(x=variable, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
p <- ggplot(melt(gse), aes(x=variable, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
boxplot(gse)
write.csv(gse, "GSE120396_expression_matrix.txt")
## quick filter to reduce computational time
largevar = apply(gse, 1, var)
ind = which(largevar > quantile(largevar, 0.9))
X = as.matrix(t(gse[ind,]))
y = rejection_status
cvK = 5  # number of CV folds
cv_50acc5_knn = cv_50acc5_svm = cv_50acc5_rf = c()
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
n_sim = 25 ## number of repeats
for (i in 1:n_sim) {
cvSets = cvTools::cvFolds(nrow(X), cvK)  # permute all the data, into 5 folds
cv_acc_knn = cv_acc_svm = cv_acc_rf = c()
for (j in 1:cvK) {
test_id = cvSets$subsets[cvSets$which == j]
X_test = X[test_id, ]
X_train = X[-test_id, ]
y_test = y[test_id]
y_train = y[-test_id]
## KNN
fit5 = class::knn(train = X_train, test = X_test, cl = y_train, k = 5)
cv_acc_knn[j] = table(fit5, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## SVM
svm_res <- e1071::svm(x = X_train, y = as.factor(y_train))
fit <- predict(svm_res, X_test)
cv_acc_svm[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
## RandomForest
rf_res <- randomForest::randomForest(x = X_train, y = as.factor(y_train))
fit <- predict(rf_res, X_test)
cv_acc_rf[j] = table(fit, y_test) %>% diag %>% sum %>% `/`(length(y_test))
}
cv_50acc5_knn <- append(cv_50acc5_knn, mean(cv_acc_knn))
cv_50acc5_svm <- append(cv_50acc5_svm, mean(cv_acc_svm))
cv_50acc5_rf <- append(cv_50acc5_rf, mean(cv_acc_rf))
} ## end for
boxplot(list(SVM = cv_50acc5_svm, KNN = cv_50acc5_knn , RF= cv_50acc5_rf ))
boxplot(gse)
p <- ggplot(melt(gse), aes(x=Var1, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
boxplot(gse)
p <- ggplot(melt(gse), aes(x=Var2, y=value)) +
geom_boxplot(outlier.colour="black", outlier.shape=16,
outlier.size=0.5, notch=FALSE) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs (x = "patient", y = "expression value") + theme_minimal()
p
shiny::runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
runApp('DATA3888')
## quick filter to reduce computational time
gse <- read.csv("GSE120396_expression_matrix.txt")
largevar = apply(gse, 1, var)
# Read in all 88 files to make a table
gse = c()
for(i in 1:length(fileNames)){
temptable <- read.delim(file.path(datadir, fileNames[i]), header=TRUE)
gse <- cbind(gse, temptable[,2])
colnames(gse)[i] <- colnames(temptable)[2]
}
rownames(gse) = read.delim(file.path(datadir, fileNames[1]), header=TRUE)[,1]
runApp('DATA3888')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
